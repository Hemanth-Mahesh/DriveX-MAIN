import boto3
import os
import datetime
import json

GROUP_NAME = "api-gateway-reachx-production"
DESTINATION_BUCKET = "drivex-service-logs"
PREFIX = "API-Gateway-Reachx-prod-IP/"
NDAYS = 1

def lambda_handler(event, context):
    nDays = int(NDAYS)
    currentTime = datetime.datetime.now()
    StartDate = currentTime - datetime.timedelta(days=nDays)
    EndDate = currentTime - datetime.timedelta(days=nDays - 1)
    fromDate = int(StartDate.timestamp() * 1000)
    toDate = int(EndDate.timestamp() * 1000)
    BUCKET_PREFIX = os.path.join(PREFIX, StartDate.strftime('%Y{0}%m{0}%d').format(os.path.sep))

    logs_client = boto3.client('logs')
    s3_client = boto3.client('s3')

    # CloudWatch Logs Insights query
    query = """
    fields @timestamp, @message
    | parse @message '"ip": "*"' as ip_address
    | filter ip_address != "-"
    | stats count(*) as count by ip_address
    | sort count desc
    """

    # Start the query
    start_query_response = logs_client.start_query(
        logGroupName=GROUP_NAME,
        startTime=fromDate,
        endTime=toDate,
        queryString=query
    )

    query_id = start_query_response['queryId']

    # Wait for the query to complete
    response = None
    while response is None or response['status'] == 'Running':
        print('Waiting for query to complete ...')
        response = logs_client.get_query_results(
            queryId=query_id
        )

    # Process the results
    ip_addresses = []
    for result in response['results']:
        ip_address = next(item['value'] for item in result if item['field'] == 'ip_address')
        count = next(item['value'] for item in result if item['field'] == 'count')
        ip_addresses.append(f"{ip_address},{count}")

    # Join the IP addresses into a single string
    ip_addresses_str = "\n".join(ip_addresses)

    # Upload to S3
    file_name = f"ip_addresses_{StartDate.strftime('%Y%m%d')}.csv"
    s3_key = os.path.join(BUCKET_PREFIX, file_name)
    
    s3_client.put_object(
        Bucket=DESTINATION_BUCKET,
        Key=s3_key,
        Body=ip_addresses_str
    )

    print(f"IP addresses uploaded to s3://{DESTINATION_BUCKET}/{s3_key}")

    return {
        'statusCode': 200,
        'body': json.dumps(f"IP addresses uploaded to s3://{DESTINATION_BUCKET}/{s3_key}")
    }
